@model AFAapp.Models.Tree


<!DOCTYPE html>


<head>
    <script>MathJax = {
            tex: { inlineMath: [['$', '$'], ['\\(', '\\)']] }
        };</script>
    <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js"></script>

</head>

<body>

    @{
        try
        {
            showTree(new Tree(Model.letter, Model.state, Model.connectives, Model.children));

        <p class="right-col-p" style="margin-top: 7%">
            Then, assigning <strong>true</strong> to <strong> final states </strong> and
            <strong>false</strong> to <strong>non-final states</strong> we get:
        </p>


            <p class="right-col-p"> <strong>@ViewData["stringToEval"].</strong></p>

            if ((bool)ViewData["Accepted"])
            {
                <p class="right-col-p">
                    This evaluates to <strong>@ViewData["accepted"]</strong> and therefore, the word <strong> "@ViewData["inputWord"]" </strong> is <strong>accepted</strong>.
                </p>
            }

            else
            {
                <p class="right-col-p">
                    This evaluates to <strong>@ViewData["accepted"]</strong> and therefore, the word <strong> "@ViewData["inputWord"]" </strong> is <strong>not</strong> accepted.
                </p>
            }
        }

        catch
        {
            if (ViewData.Keys.Contains("Error"))
            {
                <p class="text-danger right-col-p">  @ViewData["Error"] </p>
            }

        }
    }



    @functions
{

        public void showTree3(Tree t)
        {
            @*padding - left:inherit;*@
            @*style = "display:flex; justify-content: center"*@
            @*text - align:left*@
            @*<div>*@
            @*<ul style="list-style-position: inside;">*@
            <ul>

                <li>
                    <b>@t.state</b>
                    @foreach (var i in t.connectives)
                    {
                        <b>@i.Item1</b>
                    }

                    @if (t.letter != '\0')
                    {
                        <b>(@t.letter)</b>;

                    }
                </li>
                @if (t.children != null && t.children.Any())
                {
                    for (int i = 0; i < t.children?.Count; i++)
                    {
                        showTree3(t.children[i]);
                    }
                }

            </ul>
            @*</div>*@

        }

        public void show(Tree t)
        {


            @if (t.children != null && t.children.Any())
            {
                <ul>

                    @for (int i = 0; i < t.children.Count; i++)
                    {

                        int notCount = 0;


                        @if (t.children[i].connectives != null && t.children[i].connectives.Any() && t.children[i].connectives[0].Item1 == "not")
                        {
                            var stateArr = Global.stringToArrayNoPar(t.state);

                            if (stateArr[0] == "not")
                            {
                                int height = t.height();
                                @*while (t.children[i].connectives.Count > notCount && t.children[i].connectives[notCount].Item1 == "not")
                                    {*@

                                @*if (t.children[i].connectives[notCount].Item1 == "not")
                                    {*@
                                <li>
                                    <span>not</span>

                                    @for (int w = 0; w < height - 1; w++)
                                    {<br>
                                        <ul>
                                            <li>
                                                <span>not</span>
                                            </li>
                                        </ul>
                                    }


                                </li>
                                @*}*@

                                notCount += 1;

                                @*}*@
                            }
                        }

                        <li>
                            <span>
                                <b>@t.children[i].state</b>
                            </span>

                            @if (t.children[i].letter != '\0')
                            {
                                <b>(@t.children[i].letter)</b>
                            }


                            @for (int j = 0; j < 1; j++)
                            {
                                show(t.children[i]);
                            }


                        </li>
                        @if (t.children[i].connectives != null && t.children[i].connectives.Any())
                        {

                            if (i != (t.children.Count - 1))
                            {
                                var conList = new List<string>();
                                bool b = false;
                                <li>
                                    <span>
                                        @foreach (var con in t.children[i].connectives)
                                        {
                                            if (con.Item1 != "not")
                                            {
                                                b = true;
                                            }

                                            if (b)
                                            {
                                                conList.Add(con.Item1);
                                                <span> @con.Item1</span>
                                            }
                                        }

                                    </span>


                                    @*connectives tou telefteou child t.children[i]*@

                                    @{

                                        @*if (t.children[i].children != null && t.children[i].children.Any())
                                            {
                                                int c = t.children[i].children.Count;

                                                if (t.children[i].children[c - 1].connectives != null && t.children[i].children[c - 1].connectives.Any())
                                                {
                                                    var cons = t.children[i].children[c - 1].connectives;
                                                    <br>
                                                    <ul>
                                                        <li>
                                                            <span>
                                                                @foreach (var k in cons)
                                                                {
                                                                    <span> @k.Item1</span>;
                                                                }
                                                            </span>
                                                        </li>
                                                    </ul>
                                                }
                                            }*@
                                    }

                                    @*@{var hasNextLevel = false;}
                                        @foreach (var child in t.children)
                                        {
                                            if (child.children != null && child.children.Any())
                                            {
                                                hasNextLevel = true;
                                            }
                                        }*@

                                    @*@{var hasNextLevel = true;}

                                        @while (hasNextLevel)
                                        {

                                            foreach (var child in t.children)
                                            {
                                                if (child.children == null || !child.children.Any())
                                                {
                                                    hasNextLevel = false;
                                                }
                                            }

                                            if (hasNextLevel)
                                            {
                                                <br>
                                                <ul>
                                                    <li>

                                                        <span>
                                                            @foreach (var l in conList)
                                                            {
                                                                <span> @l </span>
                                                            }
                                                        </span>
                                                    </li>

                                                </ul>
                                            }
                                        }*@


                                    @{ int h = t.height();
                                        for (int r = 0; r < h - 1; r++)
                                        {
                                            <br>
                                            <ul>
                                                <li>

                                                    <span>
                                                        @foreach (var l in conList)
                                                        {
                                                            <span> @l </span>
                                                        }
                                                    </span>
                                                </li>

                                            </ul>
                                        }
                                    }
                                </li>
                            }



                            @*else
                                {
                                    <li>
                                        <ul>
                                            <li>
                                                <span>
                                                    @foreach (var con in t.children[i].connectives)
                                                    {
                                                        <span> @con.Item1</span>
                                                    }

                                                </span>

                                            </li>
                                        </ul>
                                    </li>


                                }*@


                        }
                    }
                </ul>
            }
        }



        public void showTree(Tree t)
        {
            <div class="tree-diagram">

                <ul>
                    <li class="root">
                        <b>@t.state</b>
                        @foreach (var i in t.connectives)
                        {
                            <b>@i.Item1</b>
                        }

                        @if (t.letter != '\0')
                        {
                            <b>(@t.letter)</b>;
                        }
                        @{ int height = t.height();

                            show(t);
                        }
                    </li>
                </ul>
            </div>
        }
    }

    @*<ul class="tree">
            <li>
                <span>q0(b)</span>
                <ul>
                    <li>
                        <span>q0 and not q1</span>

                        <ul>
                            <li>
                                <span>q0 and not q1 and not</span>
                                <ul>
                                    <li><span>q1 and not</span></li>
                                    <li><span>q0 and not not</span></li>
                                </ul>

                            </li>
                            <li>
                                <span>not q0</span>
                                <ul>
                                    <li><span>q1</span></li>
                                </ul>
                            </li>
                        </ul>


                </ul>
            </li>
        </ul>






        <div class="tree-diagram">
            <ul>
                <li>
                    <a href="#">Parent</a>
                    <ul>
                        <li>
                            <a href="#">Child</a>
                            <ul>
                                <li>
                                    <a href="#">Grand Child</a>
                                </li>
                            </ul>
                        </li>
                        <li>
                            <a href="#">Child</a>
                            <ul>
                                <li><a href="#">Grand Child</a></li>
                                <li>
                                    <a href="#">Grand Child</a>
                                    <ul>
                                        <li>
                                            <a href="#">Great Grand Child</a>
                                        </li>
                                        <li>
                                            <a href="#">Great Grand Child</a>
                                        </li>
                                        <li>
                                            <a href="#">Great Grand Child</a>
                                        </li>
                                    </ul>
                                </li>
                                <li><a href="#">Grand Child</a></li>
                            </ul>
                        </li>
                    </ul>
                </li>
            </ul>
        </div>






        <div class="tree">
            <ul>
                <li>
                    <a href="#">
                        <div class="heda"></div>
                    </a>
                    <ul>
                        <li>
                            <a href="#">
                                <div class="heda"></div>
                            </a>
                        </li>
                        <li>
                            <a href="#">
                                <div class="heda"></div>
                            </a>
                        </li>
                        <li>
                            <a href="#">
                                <div class="heda"></div>
                            </a>
                        </li>
                        <li>
                            <a href="#">
                                <div class="heda"></div>
                            </a>
                        </li>
                        <li>
                            <a href="#">
                                <div class="heda"></div>
                            </a>
                        </li>
                        <li>
                            <a href="#">
                                <div class="heda"></div>
                            </a>
                        </li>
                    </ul>
                </li>
            </ul>
        </div>*@



</body>
