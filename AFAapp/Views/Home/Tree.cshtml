@model AFAapp.Models.Tree

<head></head>

<body>

    @{
        @*If the input is valid the Tree is displayed. Otherwise the relevant error message appears*@

        try
        {
            displayTree(new Tree(Model.letter, Model.node, Model.connectives, Model.children));

            <p class="right-col-p" style="margin-top: 7%">
                Then, assigning <strong> true </strong> to <strong> final states </strong> and
                <strong>false</strong> to <strong>non-final states</strong> we get:
            </p>

            <p class="right-col-p"> <strong>@ViewData["stringToEval"].</strong></p>

            if ((bool)ViewData["Accepted"])
            {
                <p class="right-col-p">
                    This evaluates to <strong>@ViewData["accepted"]</strong> and therefore, the word <strong> "@ViewData["inputWord"]" </strong> is <strong>accepted</strong>.
                </p>
            }

            else
            {
                <p class="right-col-p">
                    This evaluates to <strong>@ViewData["accepted"]</strong> and therefore, the word <strong> "@ViewData["inputWord"]" </strong> is <strong>not</strong> accepted.
                </p>
            }
        }

        catch
        {
            if (ViewData.Keys.Contains("Error"))
            {
                <p class="text-danger right-col-p">  @ViewData["Error"] </p>
            }
        }
    }


    @* Functions for creating the Tree view from the provided Tree model.*@

    @functions
{

        public void displayTree(Tree t)
        {
            <div class="tree">

                <ul>
                    <li class="root">
                        <b>@t.node</b>
                        @foreach (var i in t.connectives)
                        {
                            <b>@i.Item1</b>
                        }

                        @if (t.letter != '\0')
                        {
                            <b>(@t.letter)</b>;
                        }
                        @{ int height = t.height();

                            displayChildren(t);
                        }
                    </li>
                </ul>
            </div>
        }


        public void displayChildren(Tree t)
        {
            @if (t.children != null && t.children.Any())
            {
                <ul>

                    @for (int i = 0; i < t.children.Count; i++)
                    {
                        @if (t.children[i].connectives != null && t.children[i].connectives.Any() && t.children[i].connectives[0].Item1 == "not")
                        {
                            var stateList = Global.stringToListNoPar(t.node);

                            while (stateList[0] == "not")
                            {
                                stateList.RemoveAt(0);
                                int height = t.height();
                                <li>
                                    <span>not</span>

                                    @for (int w = 0; w < height - 1; w++)
                                    {<br>
                                        <ul>
                                            <li>
                                                <span>not</span>
                                            </li>
                                        </ul>
                                    }

                                </li>
                            }
                        }

                        <li>
                            <span>
                                <b>@t.children[i].node</b>
                            </span>

                            @if (t.children[i].letter != '\0')
                            {
                                <b>(@t.children[i].letter)</b>
                            }


                            @for (int j = 0; j < 1; j++)
                            {
                                displayChildren(t.children[i]);
                            }
                        </li>

                        @if (t.children[i].connectives != null && t.children[i].connectives.Any())
                        {
                            if (i != (t.children.Count - 1))
                            {
                                var conList = new List<string>();
                                bool b = false;
                                <li>
                                    <span>
                                        @foreach (var con in t.children[i].connectives)
                                        {
                                            if (con.Item1 != "not")
                                            {
                                                b = true;
                                            }

                                            if (b)
                                            {
                                                conList.Add(con.Item1);
                                                <span> @con.Item1</span>
                                            }
                                        }

                                    </span>

                                    @{ int h = t.height();
                                        for (int r = 0; r < h - 1; r++)
                                        {
                                            <br>
                                            <ul>
                                                <li>

                                                    <span>
                                                        @foreach (var l in conList)
                                                        {
                                                            <span> @l </span>
                                                        }
                                                    </span>
                                                </li>

                                            </ul>
                                        }
                                    }
                                </li>
                            }
                        }
                    }
                </ul>
            }
        }
    }

</body>
